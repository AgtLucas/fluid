// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad_Except = require("../Control.Monad.Except");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Foreign = require("../Data.Foreign");
var Data_Foreign_Index = require("../Data.Foreign.Index");
var Data_Foreign_Internal = require("../Data.Foreign.Internal");
var Data_Foreign_JSON = require("../Data.Foreign.JSON");
var Data_Foreign_NullOrUndefined = require("../Data.Foreign.NullOrUndefined");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Nullable = require("../Data.Nullable");
var Data_Record = require("../Data.Record");
var Data_Record_Builder = require("../Data.Record.Builder");
var Data_Semigroup = require("../Data.Semigroup");
var Data_StrMap = require("../Data.StrMap");
var Data_Symbol = require("../Data.Symbol");
var Data_Traversable = require("../Data.Traversable");
var Global_Unsafe = require("../Global.Unsafe");
var Prelude = require("../Prelude");
var Type_Row = require("../Type.Row");
var ReadForeign = function (readImpl) {
    this.readImpl = readImpl;
};
var ReadForeignFields = function (getFields) {
    this.getFields = getFields;
};
var WriteForeign = function (writeImpl) {
    this.writeImpl = writeImpl;
};
var WriteForeignFields = function (writeImplFields) {
    this.writeImplFields = writeImplFields;
};
var writeImplFields = function (dict) {
    return dict.writeImplFields;
};
var writeImpl = function (dict) {
    return dict.writeImpl;
};
var writeJSON = function (dictWriteForeign) {
    return function ($50) {
        return Global_Unsafe.unsafeStringify(writeImpl(dictWriteForeign)($50));
    };
};
var writeForeignString = new WriteForeign(Data_Foreign.toForeign);
var writeForeignStrMap = function (dictWriteForeign) {
    return new WriteForeign(function ($51) {
        return Data_Foreign.toForeign(Data_StrMap.mapWithKey(Data_Function["const"](writeImpl(dictWriteForeign)))($51));
    });
};
var writeForeignNumber = new WriteForeign(Data_Foreign.toForeign);
var writeForeignNullOrUndefined = function (dictWriteForeign) {
    return new WriteForeign(function (v) {
        return Data_Maybe.maybe(Data_Foreign_NullOrUndefined["undefined"])(writeImpl(dictWriteForeign))(v);
    });
};
var writeForeignMaybe = function (dictWriteForeign) {
    return new WriteForeign(function (v) {
        if (v instanceof Data_Maybe.Just) {
            return writeImpl(dictWriteForeign)(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Foreign.toForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
        };
        throw new Error("Failed pattern match at Simple.JSON line 190, column 1 - line 190, column 71: " + [ v.constructor.name ]);
    });
};
var writeForeignNullable = function (dictWriteForeign) {
    return new WriteForeign(function ($52) {
        return writeImpl(writeForeignMaybe(dictWriteForeign))(Data_Nullable.toMaybe($52));
    });
};
var writeForeignInt = new WriteForeign(Data_Foreign.toForeign);
var writeForeignForeign = new WriteForeign(Control_Category.id(Control_Category.categoryFn));
var writeForeignChar = new WriteForeign(Data_Foreign.toForeign);
var writeForeignBoolean = new WriteForeign(Data_Foreign.toForeign);
var writeForeignArray = function (dictWriteForeign) {
    return new WriteForeign(function (xs) {
        return Data_Foreign.toForeign(Data_Functor.map(Data_Functor.functorArray)(writeImpl(dictWriteForeign))(xs));
    });
};
var write = function (dictWriteForeign) {
    return writeImpl(dictWriteForeign);
};
var recordWriteForeign = function (dictRowToList) {
    return function (dictWriteForeignFields) {
        return new WriteForeign(function (rec) {
            var steps = writeImplFields(dictWriteForeignFields)(Type_Row.RLProxy.value)(rec);
            return Data_Foreign.toForeign(Data_Record_Builder.build(steps)({}));
        });
    };
};
var readString = new ReadForeign(Data_Foreign.readString);
var readNumber = new ReadForeign(Data_Foreign.readNumber);
var readInt = new ReadForeign(Data_Foreign.readInt);
var readImpl = function (dict) {
    return dict.readImpl;
};
var readJSON = function (dictReadForeign) {
    return function ($53) {
        return Control_Monad_Except.runExcept(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Data_Foreign_JSON.parseJSON)($53));
    };
};
var readJSON$prime = function (dictReadForeign) {
    return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Data_Foreign_JSON.parseJSON);
};
var readNullOrUndefined = function (dictReadForeign) {
    return new ReadForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(readImpl(dictReadForeign)));
};
var readMaybe = function (dictReadForeign) {
    return new ReadForeign(function ($54) {
        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Foreign_NullOrUndefined.unNullOrUndefined)(readImpl(readNullOrUndefined(dictReadForeign))($54));
    });
};
var readNullable = function (dictReadForeign) {
    return new ReadForeign(function (o) {
        var reformat = function (error) {
            if (error instanceof Data_Foreign.TypeMismatch) {
                return new Data_Foreign.TypeMismatch("Nullable " + error.value0, error.value1);
            };
            return error;
        };
        return Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(reformat))(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Nullable.toNullable))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))))(Data_Foreign.readNull(o)));
    });
};
var readStrMap = function (dictReadForeign) {
    return new ReadForeign(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($55) {
        return Data_Traversable.sequence(Data_StrMap.traversableStrMap)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_StrMap.mapWithKey(Data_Function["const"](readImpl(dictReadForeign)))($55));
    })(Data_Foreign_Internal.readStrMap));
};
var readForeign = new ReadForeign(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
var readFieldsNil = new ReadForeignFields(function (v) {
    return function (v1) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.id(Data_Record_Builder.categoryBuilder));
    };
});
var readChar = new ReadForeign(Data_Foreign.readChar);
var readBoolean = new ReadForeign(Data_Foreign.readBoolean);
var readArray = function (dictReadForeign) {
    return new ReadForeign((function () {
        var readElements = function (xs) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Functor.functorArray)(readImpl(dictReadForeign))(xs));
        };
        return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readElements)(Data_Foreign.readArray);
    })());
};
var read = function (dictReadForeign) {
    return readImpl(dictReadForeign);
};
var nilWriteForeignFields = new WriteForeignFields(function (v) {
    return function (v1) {
        return Control_Category.id(Data_Record_Builder.categoryBuilder);
    };
});
var getFields = function (dict) {
    return dict.getFields;
};
var readFieldsCons = function (dictIsSymbol) {
    return function (dictReadForeign) {
        return function (dictReadForeignFields) {
            return function (dictRowLacks) {
                return function (dictRowCons) {
                    return new ReadForeignFields(function (v) {
                        return function (obj) {
                            var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var withExcept$prime = Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign.ErrorAtProperty.create(name)));
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(withExcept$prime(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Data_Foreign_Index.readProp(name)(obj))))(function (v1) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(getFields(dictReadForeignFields)(Type_Row.RLProxy.value)(obj))(function (v2) {
                                    var first = Data_Record_Builder.insert(dictRowCons)(dictRowLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(v1);
                                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Semigroupoid.compose(Data_Record_Builder.semigroupoidBuilder)(first)(v2));
                                });
                            });
                        };
                    });
                };
            };
        };
    };
};
var readRecord = function (dictRowToList) {
    return function (dictReadForeignFields) {
        return new ReadForeign(function (o) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(getFields(dictReadForeignFields)(Type_Row.RLProxy.value)(o))(function (v) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Record_Builder.build(v)({}));
            });
        });
    };
};
var consWriteForeignFields = function (dictIsSymbol) {
    return function (dictWriteForeign) {
        return function (dictWriteForeignFields) {
            return function (dictRowCons) {
                return function (dictRowLacks) {
                    return function (dictRowCons1) {
                        return new WriteForeignFields(function (v) {
                            return function (rec) {
                                var rest = writeImplFields(dictWriteForeignFields)(Type_Row.RLProxy.value)(rec);
                                var value = writeImpl(dictWriteForeign)(Data_Record.get(dictIsSymbol)(dictRowCons)(Data_Symbol.SProxy.value)(rec));
                                var result = Control_Semigroupoid.compose(Data_Record_Builder.semigroupoidBuilder)(Data_Record_Builder.insert(dictRowCons1)(dictRowLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(value))(rest);
                                return result;
                            };
                        });
                    };
                };
            };
        };
    };
};
module.exports = {
    readJSON: readJSON,
    "readJSON'": readJSON$prime,
    writeJSON: writeJSON,
    write: write,
    read: read,
    ReadForeign: ReadForeign,
    readImpl: readImpl,
    ReadForeignFields: ReadForeignFields,
    getFields: getFields,
    WriteForeign: WriteForeign,
    writeImpl: writeImpl,
    WriteForeignFields: WriteForeignFields,
    writeImplFields: writeImplFields,
    readForeign: readForeign,
    readChar: readChar,
    readNumber: readNumber,
    readInt: readInt,
    readString: readString,
    readBoolean: readBoolean,
    readArray: readArray,
    readNullOrUndefined: readNullOrUndefined,
    readMaybe: readMaybe,
    readNullable: readNullable,
    readStrMap: readStrMap,
    readRecord: readRecord,
    readFieldsCons: readFieldsCons,
    readFieldsNil: readFieldsNil,
    writeForeignForeign: writeForeignForeign,
    writeForeignString: writeForeignString,
    writeForeignInt: writeForeignInt,
    writeForeignChar: writeForeignChar,
    writeForeignNumber: writeForeignNumber,
    writeForeignBoolean: writeForeignBoolean,
    writeForeignArray: writeForeignArray,
    writeForeignNullOrUndefined: writeForeignNullOrUndefined,
    writeForeignMaybe: writeForeignMaybe,
    writeForeignNullable: writeForeignNullable,
    writeForeignStrMap: writeForeignStrMap,
    recordWriteForeign: recordWriteForeign,
    consWriteForeignFields: consWriteForeignFields,
    nilWriteForeignFields: nilWriteForeignFields
};
